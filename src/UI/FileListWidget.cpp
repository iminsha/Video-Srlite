#include "FileListWidget.h"
#include <QFileDialog>
#include <QMessageBox>
#include <QStandardPaths>
#include <QMimeDatabase>
#include <QApplication>
#include <QDebug>
#include <QDateTime>

// FileListItem ÂÆûÁé∞
FileListItem::FileListItem(const FileItemData& data, QListWidget *parent)
    : QListWidgetItem(parent)
    , m_fileData(data)
{
    updateDisplay();
}

void FileListItem::setFileData(const FileItemData& data)
{
    m_fileData = data;
    updateDisplay();
}

void FileListItem::setProcessed(bool processed)
{
    m_fileData.isProcessed = processed;
    updateDisplay();
}

void FileListItem::updateDisplay()
{
    QString displayText;
    
    if (m_fileData.isProcessed) {
        displayText = "‚úÖ " + m_fileData.fileName;
    } else {
        displayText = "üìÑ " + m_fileData.fileName;
    }
    
    displayText += QString(" (%1)").arg(m_fileData.sizeText);
    
    setText(displayText);
    
    // ËÆæÁΩÆÂ∑•ÂÖ∑ÊèêÁ§∫
    QString tooltip = QString("Êñá‰ª∂Ë∑ØÂæÑ: %1\nÊñá‰ª∂Â§ßÂ∞è: %2\n‰øÆÊîπÊó∂Èó¥: %3")
                         .arg(m_fileData.filePath)
                         .arg(m_fileData.sizeText)
                         .arg(m_fileData.fileInfo.lastModified().toString("yyyy-MM-dd hh:mm:ss"));
    
    if (m_fileData.isProcessed) {
        tooltip += "\nÁä∂ÊÄÅ: Â∑≤Â§ÑÁêÜ";
    } else {
        tooltip += "\nÁä∂ÊÄÅ: ÂæÖÂ§ÑÁêÜ";
    }
    
    setToolTip(tooltip);
    
    // ËÆæÁΩÆÂõæÊ†áÈ¢úËâ≤
    if (m_fileData.isProcessed) {
        setForeground(QColor("#4caf50")); // ÁªøËâ≤
    } else {
        setForeground(QColor("#666666")); // ÁÅ∞Ëâ≤
    }
}

// DragDropListWidget ÂÆûÁé∞
DragDropListWidget::DragDropListWidget(QWidget *parent)
    : QListWidget(parent)
{
    setAcceptDrops(true);
    setDragDropMode(QAbstractItemView::DropOnly);
    setDefaultDropAction(Qt::CopyAction);
}

void DragDropListWidget::dragEnterEvent(QDragEnterEvent *event)
{
    if (event->mimeData()->hasUrls()) {
        QStringList imageFiles = extractImageFiles(event->mimeData());
        if (!imageFiles.isEmpty()) {
            event->acceptProposedAction();
            return;
        }
    }
    event->ignore();
}

void DragDropListWidget::dragMoveEvent(QDragMoveEvent *event)
{
    if (event->mimeData()->hasUrls()) {
        QStringList imageFiles = extractImageFiles(event->mimeData());
        if (!imageFiles.isEmpty()) {
            event->acceptProposedAction();
            return;
        }
    }
    event->ignore();
}

void DragDropListWidget::dropEvent(QDropEvent *event)
{
    QStringList imageFiles = extractImageFiles(event->mimeData());
    if (!imageFiles.isEmpty()) {
        emit filesDropped(imageFiles);
        event->acceptProposedAction();
    } else {
        event->ignore();
    }
}

bool DragDropListWidget::isValidImageFile(const QString& filePath)
{
    QMimeDatabase mimeDb;
    QMimeType mimeType = mimeDb.mimeTypeForFile(filePath);
    
    return mimeType.name().startsWith("image/") && 
           (mimeType.name().contains("jpeg") || 
            mimeType.name().contains("png") || 
            mimeType.name().contains("bmp") || 
            mimeType.name().contains("tiff") ||
            mimeType.name().contains("webp"));
}

QStringList DragDropListWidget::extractImageFiles(const QMimeData* mimeData)
{
    QStringList imageFiles;
    
    if (mimeData->hasUrls()) {
        for (const QUrl& url : mimeData->urls()) {
            if (url.isLocalFile()) {
                QString filePath = url.toLocalFile();
                if (isValidImageFile(filePath)) {
                    imageFiles.append(filePath);
                }
            }
        }
    }
    
    return imageFiles;
}

// FileListWidget ÂÆûÁé∞
FileListWidget::FileListWidget(QWidget *parent)
    : QWidget(parent)
    , m_totalFiles(0)
    , m_processedFiles(0)
{
    m_supportedFormats = getSupportedImageFormats();
    setupUI();
    connectSignals();
}

FileListWidget::~FileListWidget()
{
}

void FileListWidget::setupUI()
{
    // ÂàõÂª∫‰∏ªÂ∏ÉÂ±Ä
    QVBoxLayout* mainLayout = new QVBoxLayout(this);
    mainLayout->setSpacing(12);
    
    // Êñá‰ª∂ÂàóË°®ÂàÜÁªÑÊ°Ü
    m_fileGroupBox = new QGroupBox("üìÅ ÂõæÂÉèÊñá‰ª∂ÂàóË°®", this);
    mainLayout->addWidget(m_fileGroupBox);
    
    QVBoxLayout* fileLayout = new QVBoxLayout(m_fileGroupBox);
    fileLayout->setSpacing(12);
    
    // Â∑•ÂÖ∑Ê†è
    m_toolbarWidget = new QWidget(this);
    m_toolbarWidget->setObjectName("fileToolbar");
    fileLayout->addWidget(m_toolbarWidget);
    
    QHBoxLayout* toolbarLayout = new QHBoxLayout(m_toolbarWidget);
    toolbarLayout->setSpacing(12);
    
    m_addFilesBtn = new QPushButton("‚ûï Ê∑ªÂä†Êñá‰ª∂", this);
    m_addFilesBtn->setToolTip("Ê∑ªÂä†ÂõæÂÉèÊñá‰ª∂Âà∞Â§ÑÁêÜÈòüÂàó\nÊîØÊåÅÊ†ºÂºè: JPG, PNG, BMP, TIFF, WebP");
    toolbarLayout->addWidget(m_addFilesBtn);
    
    m_removeFileBtn = new QPushButton("‚ûñ ÁßªÈô§ÈÄâ‰∏≠", this);
    m_removeFileBtn->setToolTip("ÁßªÈô§ÂΩìÂâçÈÄâ‰∏≠ÁöÑÊñá‰ª∂");
    m_removeFileBtn->setEnabled(false);
    toolbarLayout->addWidget(m_removeFileBtn);
    
    m_clearAllBtn = new QPushButton("üóëÔ∏è Ê∏ÖÁ©∫ÂàóË°®", this);
    m_clearAllBtn->setToolTip("Ê∏ÖÁ©∫ÊâÄÊúâÊñá‰ª∂");
    m_clearAllBtn->setEnabled(false);
    toolbarLayout->addWidget(m_clearAllBtn);
    
    toolbarLayout->addStretch();
    
    // Êñá‰ª∂ÂàóË°®
    m_fileListWidget = new DragDropListWidget(this);
    m_fileListWidget->setMinimumHeight(300);
    m_fileListWidget->setAlternatingRowColors(true);
    m_fileListWidget->setSelectionMode(QAbstractItemView::SingleSelection);
    fileLayout->addWidget(m_fileListWidget);
    
    // Áä∂ÊÄÅÊ†è
    m_statusWidget = new QWidget(this);
    m_statusWidget->setMaximumHeight(50);
    fileLayout->addWidget(m_statusWidget);
    
    QHBoxLayout* statusLayout = new QHBoxLayout(m_statusWidget);
    statusLayout->setSpacing(20);
    
    m_fileCountLabel = new QLabel("Êñá‰ª∂Êï∞Èáè: 0", this);
    m_fileCountLabel->setStyleSheet("color: #666666; font-size: 12px;");
    statusLayout->addWidget(m_fileCountLabel);
    
    m_processedCountLabel = new QLabel("Â∑≤Â§ÑÁêÜ: 0", this);
    m_processedCountLabel->setStyleSheet("color: #666666; font-size: 12px;");
    statusLayout->addWidget(m_processedCountLabel);
    
    statusLayout->addStretch();
    
    m_progressBar = new QProgressBar(this);
    m_progressBar->setMinimumWidth(200);
    m_progressBar->setVisible(false);
    statusLayout->addWidget(m_progressBar);
}

void FileListWidget::connectSignals()
{
    connect(m_addFilesBtn, &QPushButton::clicked, this, &FileListWidget::onAddFilesClicked);
    connect(m_removeFileBtn, &QPushButton::clicked, this, &FileListWidget::onRemoveFileClicked);
    connect(m_clearAllBtn, &QPushButton::clicked, this, &FileListWidget::onClearAllClicked);
    
    connect(m_fileListWidget, &QListWidget::itemSelectionChanged, this, &FileListWidget::onFileSelectionChanged);
    connect(m_fileListWidget, &DragDropListWidget::filesDropped, this, &FileListWidget::onFilesDropped);
}

void FileListWidget::addFile(const QString& filePath)
{
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
    for (int i = 0; i < m_fileListWidget->count(); ++i) {
        FileListItem* item = dynamic_cast<FileListItem*>(m_fileListWidget->item(i));
        if (item && item->getFileData().filePath == filePath) {
            qDebug() << "Êñá‰ª∂Â∑≤Â≠òÂú®:" << filePath;
            return;
        }
    }
    
    // ÂàõÂª∫Êñá‰ª∂È°π
    FileItemData fileData(filePath);
    if (!fileData.fileInfo.exists()) {
        QMessageBox::warning(this, "Ë≠¶Âëä", "Êñá‰ª∂‰∏çÂ≠òÂú®Ôºö" + filePath);
        return;
    }
    
    FileListItem* item = new FileListItem(fileData, m_fileListWidget);
    m_fileListWidget->addItem(item);
    
    m_totalFiles++;
    updateFileCount();
    updateButtons();
    
    qDebug() << "Ê∑ªÂä†Êñá‰ª∂:" << filePath;
}

void FileListWidget::addFiles(const QStringList& filePaths)
{
    for (const QString& filePath : filePaths) {
        addFile(filePath);
    }
}

void FileListWidget::removeCurrentFile()
{
    QListWidgetItem* currentItem = m_fileListWidget->currentItem();
    if (!currentItem) {
        return;
    }
    
    FileListItem* fileItem = dynamic_cast<FileListItem*>(currentItem);
    if (fileItem && fileItem->isProcessed()) {
        m_processedFiles--;
    }
    
    delete currentItem;
    m_totalFiles--;
    
    updateFileCount();
    updateButtons();
    
    qDebug() << "ÁßªÈô§ÂΩìÂâçÊñá‰ª∂";
}

void FileListWidget::removeAllFiles()
{
    if (m_fileListWidget->count() == 0) {
        return;
    }
    
    int ret = QMessageBox::question(this, "Á°ÆËÆ§Ê∏ÖÁ©∫", 
                                   "Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÊñá‰ª∂ÂêóÔºü\nËøôÂ∞ÜÁßªÈô§ÂàóË°®‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂„ÄÇ",
                                   QMessageBox::Yes | QMessageBox::No);
    
    if (ret == QMessageBox::Yes) {
        m_fileListWidget->clear();
        m_totalFiles = 0;
        m_processedFiles = 0;
        
        updateFileCount();
        updateButtons();
        
        qDebug() << "Ê∏ÖÁ©∫ÊâÄÊúâÊñá‰ª∂";
    }
}

QString FileListWidget::getCurrentFilePath() const
{
    QListWidgetItem* currentItem = m_fileListWidget->currentItem();
    if (!currentItem) {
        return QString();
    }
    
    FileListItem* fileItem = dynamic_cast<FileListItem*>(currentItem);
    if (fileItem) {
        return fileItem->getFileData().filePath;
    }
    
    return QString();
}

QStringList FileListWidget::getAllFilePaths() const
{
    QStringList filePaths;
    
    for (int i = 0; i < m_fileListWidget->count(); ++i) {
        FileListItem* item = dynamic_cast<FileListItem*>(m_fileListWidget->item(i));
        if (item) {
            filePaths.append(item->getFileData().filePath);
        }
    }
    
    return filePaths;
}

int FileListWidget::getFileCount() const
{
    return m_totalFiles;
}

void FileListWidget::markFileAsProcessed(const QString& filePath)
{
    for (int i = 0; i < m_fileListWidget->count(); ++i) {
        FileListItem* item = dynamic_cast<FileListItem*>(m_fileListWidget->item(i));
        if (item && item->getFileData().filePath == filePath) {
            if (!item->isProcessed()) {
                item->setProcessed(true);
                m_processedFiles++;
                updateFileCount();
                emit processingProgress(m_processedFiles, m_totalFiles);
            }
            break;
        }
    }
}

void FileListWidget::resetAllProcessedStatus()
{
    for (int i = 0; i < m_fileListWidget->count(); ++i) {
        FileListItem* item = dynamic_cast<FileListItem*>(m_fileListWidget->item(i));
        if (item) {
            item->setProcessed(false);
        }
    }
    
    m_processedFiles = 0;
    updateFileCount();
    emit processingProgress(0, m_totalFiles);
}

void FileListWidget::onAddFilesClicked()
{
    QString lastDir = QStandardPaths::writableLocation(QStandardPaths::PicturesLocation);
    
    QString filter = "ÂõæÂÉèÊñá‰ª∂ (";
    for (const QString& format : m_supportedFormats) {
        filter += "*." + format + " ";
    }
    filter = filter.trimmed() + ")";
    
    QStringList filePaths = QFileDialog::getOpenFileNames(this, "ÈÄâÊã©ÂõæÂÉèÊñá‰ª∂", lastDir, filter);
    
    if (!filePaths.isEmpty()) {
        addFiles(filePaths);
    }
}

void FileListWidget::onRemoveFileClicked()
{
    removeCurrentFile();
}

void FileListWidget::onClearAllClicked()
{
    removeAllFiles();
}

void FileListWidget::onFileSelectionChanged()
{
    QListWidgetItem* currentItem = m_fileListWidget->currentItem();
    bool hasSelection = (currentItem != nullptr);
    
    m_removeFileBtn->setEnabled(hasSelection);
    
    if (hasSelection) {
        FileListItem* fileItem = dynamic_cast<FileListItem*>(currentItem);
        if (fileItem) {
            emit fileSelected(fileItem->getFileData().filePath);
        }
    }
}

void FileListWidget::onFilesDropped(const QStringList& filePaths)
{
    if (!filePaths.isEmpty()) {
        addFiles(filePaths);
        QMessageBox::information(this, "Êñá‰ª∂Ê∑ªÂä†", QString("ÊàêÂäüÊ∑ªÂä† %1 ‰∏™Êñá‰ª∂").arg(filePaths.size()));
    }
}

void FileListWidget::updateFileCount()
{
    m_fileCountLabel->setText(QString("Êñá‰ª∂Êï∞Èáè: %1").arg(m_totalFiles));
    m_processedCountLabel->setText(QString("Â∑≤Â§ÑÁêÜ: %1").arg(m_processedFiles));
    
    // Êõ¥Êñ∞ËøõÂ∫¶Êù°
    if (m_totalFiles > 0) {
        m_progressBar->setVisible(true);
        m_progressBar->setMaximum(m_totalFiles);
        m_progressBar->setValue(m_processedFiles);
        
        double percentage = (double)m_processedFiles / m_totalFiles * 100.0;
        m_progressBar->setFormat(QString("ËøõÂ∫¶: %1%").arg(percentage, 0, 'f', 1));
    } else {
        m_progressBar->setVisible(false);
    }
    
    emit fileCountChanged(m_totalFiles);
}

void FileListWidget::updateButtons()
{
    bool hasFiles = (m_totalFiles > 0);
    m_clearAllBtn->setEnabled(hasFiles);
}

QStringList FileListWidget::getSupportedImageFormats()
{
    return {"jpg", "jpeg", "png", "bmp", "tiff", "tif", "webp"};
}

#include "FileListWidget.moc" 